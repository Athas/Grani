#!/bin/sh

# A wrapper around `sinmenu` meant to be called by `granibrowse`.  It
# provides Google Suggest (via DuckDuckGo) support through an ugly
# embedded Python script.

trap 'kill $(jobs -p) 2>/dev/null' EXIT # Kill all children when we quit.

granicache=${XDG_CACHE_HOME:-~/.cache}/grani
history=$granicache/history
visits=$granicache/visits

suggestmarkup() {
    awk '{gsub("\"", "\"\""); print "value=\""$0"\" show=\""$0" ^fg(white)(suggested)\""; fflush(); }'
}

googlesuggest() {
    python - "$@" <<EOF
import sys, string
import urllib

URI = "http://ddgg.nfriedly.com/complete/search?q="

def suggest(term):
    # Pull the results as Javascript, then munge them a bit and
    # evaluate them as Python, yielding a dictionary.
    text = urllib.urlopen(URI + urllib.quote(term)).read() \
           .replace("window.google.ac.h","")
    for res in ([x for x in eval(text)[1]]):
        print res[0].decode('latin-1').encode('utf-8')

suggest(string.join(sys.argv[1:], ' '))
EOF
}

unurl() {
    awk '/^g [a-z]+\.[a-z]+$/{print substr($0,3); next}{print}'
}

dupefilter() {
    awk '!written[$0] { written[$0] = 1; print $0; fflush() }'
}

gui() {
    code=$(cat <<EOF
input->changed(from, to) { print to; }
function quit() { print; exit }
EOF
    )
    dir=$(mktemp -p /tmp -d dir-XXXXXX) || exit 1
    fifo=$dir/fifo
    mkfifo "$fifo" || { rmdir "$dir"; exit 1; }
    (cat; tac $history 2> /dev/null; awk '/^$/ { exit } { print; fflush() }' $fifo) \
        | dupefilter \
        | (sinmenu -i -e "$code" -l 10 -b -p "uri [dgtwuy*]:" "$@"; echo > $fifo) \
        | while read line; do
        echo "$line" 1>&3
        case "$line" in
            "h "*) ;;
            "i "*) (googlesuggest "${line#i }" | sed 's/^/i /') > $fifo 3<&- & ;;
            *) (googlesuggest "${line#g }" | sed 's/^/g /' |  unurl | suggestmarkup) > $fifo 3<&- &
        esac
    done 3>&1 1>$fifo | tail -n 1 | sed '/^$/d'
    rm -r $dir
}
sel=$(gui "$@")

[ -z "$sel" ] && exit 1

opt=$(echo $sel | cut -d ' ' -f 1)
arg=$(echo $sel | cut -d ' ' -f 2-)
save=0

case "$opt" in
    "g")
        uri="http://duckduckgo.com/?q=$arg"
        save=1
        ;;
    "i")
        uri="http://www.google.com/images?q=$arg"
        save=1
        ;;
    "w")
        uri="http://wikipedia.org/wiki/$arg"
        save=1
        ;;
    "h")
        uri="http://haskell.org/hoogle/?q=$arg"
        save=1
        ;;
    "y")
        uri="http://www.youtube.com/results?search_query=$arg&aq=f"
        save=1
        ;;
    *)
        uri="$sel"
        save=1
        ;;
esac

[ "$save" -eq 1 ] && ((rm "$history" && awk '$0!=SEL' "SEL=$sel" > "$history") < "$history"; echo "$sel" >> "$history")

echo "$uri"
